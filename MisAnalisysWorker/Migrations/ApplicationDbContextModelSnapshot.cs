// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MisAnalisysWorker.Data;

#nullable disable

namespace MisAnalisysWorker.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MisAnalisysWorker.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<string>("ConditionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PrescriptionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProcessingStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ValidityIndex")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("MisAnalisysWorker.Models.AvailableService", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ServiceId");

                    b.ToTable("AvailableServices");
                });

            modelBuilder.Entity("MisAnalisysWorker.Models.ClinicalRecommendation", b =>
                {
                    b.Property<int>("RecommendationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecommendationId"));

                    b.Property<string>("ApplicableConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.HasKey("RecommendationId");

                    b.HasIndex("DiagnosisId");

                    b.ToTable("ClinicalRecommendations");
                });

            modelBuilder.Entity("MisAnalisysWorker.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("MisAnalisysWorker.Models.Diagnosis", b =>
                {
                    b.Property<int>("DiagnosisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnosisId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiagnosisId");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("MisAnalisysWorker.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeType");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("MisAnalisysWorker.Models.EmployeeType", b =>
                {
                    b.Property<int>("EmployeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeTypeId");

                    b.ToTable("EmployeeTypes");
                });

            modelBuilder.Entity("MisAnalisysWorker.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ContactInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MisAnalisysWorker.Models.PrescribedServiceParsed", b =>
                {
                    b.Property<int>("PrescribedServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescribedServiceId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("PrescribedServiceId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("PrescribedServicesParsed");
                });

            modelBuilder.Entity("MisAnalisysWorker.Models.ScheduledService", b =>
                {
                    b.Property<int>("ScheduledServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduledServiceId"));

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Executed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PlannedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScheduledById")
                        .HasColumnType("int");

                    b.Property<int>("ScheduledForId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("ScheduledServiceId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ScheduledById");

                    b.HasIndex("ScheduledForId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ScheduledServices");
                });

            modelBuilder.Entity("MisAnalisysWorker.Models.Appointment", b =>
                {
                    b.HasOne("MisAnalisysWorker.Models.Diagnosis", "DiagnosisNavigation")
                        .WithMany("Appointments")
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MisAnalisysWorker.Models.Employee", "DoctorNavigation")
                        .WithMany("DoctorAppointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MisAnalisysWorker.Models.Patient", "PatientNavigation")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiagnosisNavigation");

                    b.Navigation("DoctorNavigation");

                    b.Navigation("PatientNavigation");
                });

            modelBuilder.Entity("MisAnalisysWorker.Models.ClinicalRecommendation", b =>
                {
                    b.HasOne("MisAnalisysWorker.Models.Diagnosis", "DiagnosisNavigation")
                        .WithMany("ClinicalRecommendations")
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiagnosisNavigation");
                });

            modelBuilder.Entity("MisAnalisysWorker.Models.Employee", b =>
                {
                    b.HasOne("MisAnalisysWorker.Models.Department", "DepartmentNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("MisAnalisysWorker.Models.EmployeeType", "EmployeeTypeNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentNavigation");

                    b.Navigation("EmployeeTypeNavigation");
                });

            modelBuilder.Entity("MisAnalisysWorker.Models.PrescribedServiceParsed", b =>
                {
                    b.HasOne("MisAnalisysWorker.Models.Appointment", "AppointmentNavigation")
                        .WithMany("PrescribedServicesParsed")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MisAnalisysWorker.Models.AvailableService", "ServiceNavigation")
                        .WithMany("PrescribedServicesParsed")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentNavigation");

                    b.Navigation("ServiceNavigation");
                });

            modelBuilder.Entity("MisAnalisysWorker.Models.ScheduledService", b =>
                {
                    b.HasOne("MisAnalisysWorker.Models.Appointment", "AppointmentNavigation")
                        .WithMany("ScheduledServices")
                        .HasForeignKey("AppointmentId");

                    b.HasOne("MisAnalisysWorker.Models.Employee", "ScheduledByNavigation")
                        .WithMany("ScheduledServices")
                        .HasForeignKey("ScheduledById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MisAnalisysWorker.Models.Patient", "ScheduledForNavigation")
                        .WithMany("ScheduledServices")
                        .HasForeignKey("ScheduledForId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MisAnalisysWorker.Models.AvailableService", "ServiceNavigation")
                        .WithMany("ScheduledServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentNavigation");

                    b.Navigation("ScheduledByNavigation");

                    b.Navigation("ScheduledForNavigation");

                    b.Navigation("ServiceNavigation");
                });

            modelBuilder.Entity("MisAnalisysWorker.Models.Appointment", b =>
                {
                    b.Navigation("PrescribedServicesParsed");

                    b.Navigation("ScheduledServices");
                });

            modelBuilder.Entity("MisAnalisysWorker.Models.AvailableService", b =>
                {
                    b.Navigation("PrescribedServicesParsed");

                    b.Navigation("ScheduledServices");
                });

            modelBuilder.Entity("MisAnalisysWorker.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MisAnalisysWorker.Models.Diagnosis", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ClinicalRecommendations");
                });

            modelBuilder.Entity("MisAnalisysWorker.Models.Employee", b =>
                {
                    b.Navigation("DoctorAppointments");

                    b.Navigation("ScheduledServices");
                });

            modelBuilder.Entity("MisAnalisysWorker.Models.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MisAnalisysWorker.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ScheduledServices");
                });
#pragma warning restore 612, 618
        }
    }
}
